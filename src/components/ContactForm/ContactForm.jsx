import React, { useState } from 'react';
import './ContactForm.scss';
import InputField from '../InputField/InputField';
import { FORM_FIELDS, FORM_INITIAL_STATE, FORM_LABELS } from '../../Constants/Index';

// üîê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –∏ chat_id
const TELEGRAM_TOKEN = '7874903404:AAG_neLdw8pvspXMRz6RS0pPA8ytvwXtBtg';
const CHAT_ID = '7807376355';


const ContactForm = () => {
  const [formData, setFormData] = useState(FORM_INITIAL_STATE);

  const handleChange = (e) =>
    setFormData({ ...formData, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();

    const message = `
üìù *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã:*
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
üë§ *–ò–º—è:* ${formData.name || '-'}
üìß *Email:* ${formData.email || '-'}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone || '-'}
üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${formData.message || '-'}
    `;

    try {
      const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: 'Markdown',
        }),
      });

      const data = await res.json();
      if (data.ok) {
        alert('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        setFormData(FORM_INITIAL_STATE);
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.error(data);
      }
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram.');
      console.error(error);
    }
  };

  return (
    <form className="contact-form" onSubmit={handleSubmit}>
      <h2>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</h2>
      <p>–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –í–∞—Å</p>

      <div className="form-grid">
        {FORM_FIELDS.map((field) => (
          <InputField
            key={field.name}
            {...field}
            value={formData[field.name]}
            onChange={handleChange}
          />
        ))}
      </div>

      <div className="form-group">
        <label htmlFor="message">{FORM_LABELS.message}</label>
        <textarea
          id="message"
          name="message"
          className="form-textarea"
          value={formData.message}
          onChange={handleChange}
        />
      </div>

      <button type="submit" className="submit-button">
        {FORM_LABELS.submit}
      </button>
    </form>
  );
};

export default ContactForm;
